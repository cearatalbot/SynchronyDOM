regsDF$PFT<-pftList
#run the initDF first to avoid writing over during repeat
for(i in 1:length(pftList)){
params<-PFTtable[,which(colnames(PFTtable)==pftList[i])]  #parms for each pft
names(params)<-PFTtable$pName #name params
if(pftList[i]=="EG"){
initDF[i,1:(ncol(initDF)-1)]<-c(13000, 30, 60,60, 300, 1000, 50, 30, as.numeric(params[[19]]*.90), as.numeric(params[[41]]*.90), 600000, 500, 50, 0.01, 0.01) #fill initial conditions
} else if(pftList[i]=="DE"){
initDF[i,1:(ncol(initDF)-1)]<-c(13000, 0, 60,60, 300, 1000, 50, 30, as.numeric(params[[19]]*.90), as.numeric(params[[41]]*.90), 600000, 500, 50, 0.01, 0.01) #fill initial conditions
} else if(pftList[i]=="SH"){
initDF[i,1:(ncol(initDF)-1)]<-c(3000, 0, 60,60, 300, 1000, 50, 30, as.numeric(params[[19]]*.90), as.numeric(params[[41]]*.90), 600000, 500, 50, 0.01, 0.01) #fill initial conditions
} else if(pftList[i]=="GR" | pftList[i]=="CR"){
initDF[i,1:(ncol(initDF)-1)]<-c(0, 0, 60,60, 300, 1000, 50, 30, as.numeric(params[[19]]*.90), as.numeric(params[[41]]*.90), 600000, 500, 50, 0.01, 0.01) #fill initial conditions
}
}
###Dynamic simulations
dynamicTS<-read.csv(paste(cellDir, "/formattedForcing/weatherTS.csv", sep="")) #read in forcing data
inits<-read.csv(paste(cellDir, "/outTables/initialConditions.csv", sep="")) #read in forcing data
#get GDD from generator
library(geosphere)
phenolDF<-data.frame(matrix(ncol=3, nrow=length(unique(dynamicTS$year))))
colnames(phenolDF)<-c("Year", "LeafOn", "LeafOff")
phenolDF$Year<-unique(dynamicTS$year)
for(i in 1:nrow(phenolDF)){
dfSub<-dynamicTS[dynamicTS$year==phenolDF$Year[i],]
p<-gddSum(Tmean=dfSub$tair, baseT_on=5, latit=as.numeric(VICparam$LAT))
phenolDF$LeafOn[i]<-p[1]
phenolDF$LeafOff[i]<-p[2]
dynamicTS$DE_L[which(dynamicTS$year==phenolDF$Year[i])]<-c(rep(0,phenolDF$LeafOn[i]),(PFTtable$DE[12]*PFTtable$DE[20]*PFTtable$DE[21]),rep(0,365-phenolDF$LeafOn[i]-1))
dynamicTS$DE_Ll[which(dynamicTS$year==phenolDF$Year[i])]<-c(rep(0,phenolDF$LeafOff[i]),(PFTtable$DE[12]*PFTtable$DE[20]*PFTtable$DE[21]),rep(0,365-phenolDF$LeafOff[i]-1))
dynamicTS$EG_L[which(dynamicTS$year==phenolDF$Year[i])]<-c(rep(0,phenolDF$LeafOn[i]),(PFTtable$EG[12]*PFTtable$EG[20]*PFTtable$EG[21]),rep(0,365-phenolDF$LeafOn[i]-1))
dynamicTS$EG_Ll[which(dynamicTS$year==phenolDF$Year[i])]<-c(rep(0,phenolDF$LeafOff[i]),(PFTtable$EG[12]*PFTtable$EG[20]*PFTtable$EG[21]),rep(0,365-phenolDF$LeafOff[i]-1))
dynamicTS$GR_L[which(dynamicTS$year==phenolDF$Year[i])]<-c(rep(0,phenolDF$LeafOn[i]),(PFTtable$GR[12]*PFTtable$GR[20]*PFTtable$GR[21]),rep(0,365-phenolDF$LeafOn[i]-1))
dynamicTS$GR_Ll[which(dynamicTS$year==phenolDF$Year[i])]<-c(rep(0,phenolDF$LeafOff[i]),(PFTtable$GR[12]*PFTtable$GR[20]*PFTtable$GR[21]),rep(0,365-phenolDF$LeafOff[i]-1))
dynamicTS$CR_L[which(dynamicTS$year==phenolDF$Year[i])]<-c(rep(0,phenolDF$LeafOn[i]),(PFTtable$CR[12]*PFTtable$CR[20]*PFTtable$CR[21]),rep(0,365-phenolDF$LeafOn[i]-1))
dynamicTS$CR_Ll[which(dynamicTS$year==phenolDF$Year[i])]<-c(rep(0,phenolDF$LeafOff[i]),(PFTtable$CR[12]*PFTtable$CR[20]*PFTtable$CR[21]),rep(0,365-phenolDF$LeafOff[i]-1))
dynamicTS$SH_L[which(dynamicTS$year==phenolDF$Year[i])]<-c(rep(0,phenolDF$LeafOn[i]),(PFTtable$SH[12]*PFTtable$SH[20]*PFTtable$SH[21]),rep(0,365-phenolDF$LeafOn[i]-1))
dynamicTS$SH_Ll[which(dynamicTS$year==phenolDF$Year[i])]<-c(rep(0,phenolDF$LeafOff[i]),(PFTtable$SH[12]*PFTtable$SH[20]*PFTtable$SH[21]),rep(0,365-phenolDF$LeafOff[i]-1))
}
for(i in 1:length(pftList)){
params<-PFTtable[,which(colnames(PFTtable)==pftList[i])]  #parms for each pft
names(params)<-PFTtable$pName #name params
#####dynamic model runs#####
S0<-c(Cw=inits[i,1],Cl=inits[i,2],Cs1=inits[i,3],Cs2=inits[i,4], Cs3=inits[i,5],
Cs4=inits[i,6], Cdoc1=inits[i,7], Cdoc2=inits[i,8], W1=inits[i,9],
W2=inits[i,10], Ca=inits[i,11], Cr=inits[i,12], Ccwd=inits[i,13],
Cdic1=inits[i,14], Cdic2=inits[i,15])
dynamicTS$runDay<-1:nrow(dynamicTS)
# define forcing approx functions
PARapprox=approxfun(x=dynamicTS$runDay, y = as.numeric(dynamicTS$PARest))
Papprox=approxfun(x =dynamicTS$runDay, y = as.numeric(dynamicTS$rain_actual))
VPDapprox=approxfun(x=dynamicTS$runDay, y = as.numeric(dynamicTS$vpd))
Tair_approx=approxfun(x=dynamicTS$runDay, y = as.numeric(dynamicTS$tair))
Tsoil_approx=approxfun(x=dynamicTS$runDay, y = as.numeric(dynamicTS$tsoil))
Evap_approx=approxfun(x=dynamicTS$runDay, y= as.numeric(dynamicTS$aqEvap))
if(pftList[i]=="DE"){
Lapprox=approxfun(x=dynamicTS$runDay,y=dynamicTS$DE_L)
Ll_approx=approxfun(x=dynamicTS$runDay,y=dynamicTS$DE_Ll)
}else if(pftList[i]=="EG"){
Lapprox=approxfun(x=dynamicTS$runDay,y=dynamicTS$EG_L)
Ll_approx=approxfun(x=dynamicTS$runDay,y=dynamicTS$EG_Ll)
}else if(pftList[i]=="SH"){
Lapprox=approxfun(x=dynamicTS$runDay,y=dynamicTS$SH_L)
Ll_approx=approxfun(x=dynamicTS$runDay,y=dynamicTS$SH_Ll)
}else if(pftList[i]=="CR"){
Lapprox=approxfun(x=dynamicTS$runDay,y=dynamicTS$CR_L)
Ll_approx=approxfun(x=dynamicTS$runDay,y=dynamicTS$CR_Ll)
} else if(pftList[i]=="GR"){
Lapprox=approxfun(x=dynamicTS$runDay,y=dynamicTS$GR_L)
Ll_approx=approxfun(x=dynamicTS$runDay,y=dynamicTS$GR_Ll)
}
Snowapprox=approxfun(x=dynamicTS$runDay, y=as.numeric(dynamicTS$SnowMelt_cm))
times=1:(365*109)
dynamic=ode(y=S0,times=times,func=tamStep,parms=params,method="euler")
dynamic=data.frame(dynamic)
#label output for PFT
dynamic$pft<-pftList[i]
if(i==1){
dynamicAll<-dynamic
} else{
dynamicAll<-rbind(dynamicAll, dynamic)
}
write.csv(dynamicAll, paste(cellDir, "/outTables/dynamicSims.csv", sep=""), row.names=F)
}#end loop over PFTs
plot(dynamicAll$Cw)
pftList
######Analyze example sites
parDir="/Users/cearatalbot/RCode/tam-across-conus/setup/"
setwd(parDir)
mRCells<-read.csv("ExampleSitesCell.csv")
for(i in 1:nrow(mRCells)){
mRCells$Dir[i]<-paste("DirCell", mRCells$rastLon[i], mRCells$rastLat[i], sep="_")
}
d=1
cellDir=mRCells$Dir[d]
spinup<-read.csv(paste(cellDir, "/outTables/spinupSims.csv", sep=""))
dynamic<-read.csv(paste(cellDir, "/outTables/dynamicSims.csv", sep=""))
allD1<-rbind(spinup, dynamic)
D1DE<-allD1[which(allD1=="DE"), ]
D1DE<-allD1[which(allD1$pft=="DE"), ]
plot(D1DE$Cw)
plot(D1DE$Cs4)
plot(D1DE$Cs1)
plot(D1DE$Cs2)
plot(D1DE$Cs3)
plot(D1DE$Cs4)
plot(D1DE$Cr)
plot(D1DE$Cl)
plot(D1DE$NPP)
d=1
cellDir=mRCells$Dir[d]
spinup<-read.csv(paste(cellDir, "/outTables/spinupSims.csv", sep=""))
dynamic<-read.csv(paste(cellDir, "/outTables/dynamicSims.csv", sep=""))
df<-rbind(spinup, dynamic)
View(df)
nrow(df)/365
df$DOY<-rep(365, times=836)
library(ggplot2)
ggplot(data=df, aes(x=time, y=LDIC1, group=pft))+geom_point()+facet_grid()
ggplot(data=df, aes(x=time, y=LDIC1, group=pft))+geom_point()+facet_grid(.~x)
ggplot(data=df, aes(x=time, y=LDIC1, group=pft))+geom_point()+facet_grid(.~y)
ggplot(data=df, aes(x=time, y=LDIC1, group=pft))+geom_point()+facet_grid(.~LDIC1)
ggplot(data=df, aes(x=time, y=LDIC1, group=pft))+geom_point()+facet_grid(rows=vars(pft))
ggplot(data=df, aes(x=time, y=NPP, group=pft))+
geom_point()+facet_grid(rows=vars(pft))
ggplot(data=df, aes(x=time, y=Cw, group=pft))+
geom_point()+facet_grid(rows=vars(pft))
d=2
cellDir=mRCells$Dir[d]
spinup<-read.csv(paste(cellDir, "/outTables/spinupSims.csv", sep=""))
dynamic<-read.csv(paste(cellDir, "/outTables/dynamicSims.csv", sep=""))
df<-rbind(spinup, dynamic)
ggplot(data=df, aes(x=time, y=NPP, group=pft))+
geom_point()+facet_grid(rows=vars(pft))
ggplot(data=df, aes(x=time, y=Cw, group=pft))+
geom_point()+facet_grid(rows=vars(pft))
cellDir=mRCells$Dir[d]
spinup<-read.csv(paste(cellDir, "/outTables/spinupSims.csv", sep=""))
dynamic<-read.csv(paste(cellDir, "/outTables/dynamicSims.csv", sep=""))
df<-rbind(spinup, dynamic)
ggplot(data=df, aes(x=time, y=NPP, group=pft))+
geom_point()+facet_grid(rows=vars(pft))
View(mRCells)
ggplot(data=df, aes(x=time, y=Cw, group=pft))+
geom_point()+facet_grid(rows=vars(pft))
d=4
cellDir=mRCells$Dir[d]
spinup<-read.csv(paste(cellDir, "/outTables/spinupSims.csv", sep=""))
dynamic<-read.csv(paste(cellDir, "/outTables/dynamicSims.csv", sep=""))
df<-rbind(spinup, dynamic)
ggplot(data=df, aes(x=time, y=NPP, group=pft))+
geom_point()+facet_grid(rows=vars(pft))
ggplot(data=df, aes(x=time, y=Cw, group=pft))+
geom_point()+facet_grid(rows=vars(pft))
EG<-df[df$pft=="EG", ]
plot(EG$Cw)
sum(EG$LCT1[(nrow(EG)-364):nrow(EG)])
sum(EG$LCT2[(nrow(EG)-364):nrow(EG)])
sum(EG$LDIC1[(nrow(EG)-364):nrow(EG)])
sum(EG$LDIC2[(nrow(EG)-364):nrow(EG)])
plot(EG$Cr)
plot(EG$Ca)
mean(EG$Ca[(nrow(EG)-364):nrow(EG)])/(mean(EG$V[(nrow(EG)-364):nrow(EG)]))
#set working directory
setwd("/Users/cearatalbot/Rcode/SynchronyDOM/updatedDOM/") #file path to folder where you have the data files
#load packages
library(synchrony) #this package contains the synchrony functions
library(plyr) #contains match_df function
library(reshape2)
library(ggplot2)
library(ape)
source("synchrony/sFunctions.R") #supporting functions for analysis
########SETUP SPECIFIC TO DATASET#####
siteLookup<-read.csv("rawData/SiteNameNum.csv", stringsAsFactors = F)
data<-read.csv("rawData/ASN_allData.csv", stringsAsFactors = F)#all data
landUse<-read.csv("Out/landUseGroups.csv", stringsAsFactors = F)#all data
mixed<-as.character(landUse[which(landUse$landUse=="mixed"), 11])
wetDominated<-as.character(landUse[which(landUse$landUse=="wetDominated"), 11])
agDominated<-as.character(landUse[which(landUse$landUse=="agDominated"), 11])
allsites<-as.character(landUse$SiteNum)
#data to be included in PCA
pcaVars<-c("C1", "C2", "C3", "C4", "C5", "C6", "C7", "A350",
"SR", "HIX.OHNO", "FI", "SUVA254", "E280", "BA")
#make a list of site lists
siteList<-list(allsites=allsites, wetDominated=wetDominated,
mixed=mixed, agDominated=agDominated)
#some sites have just site number and some have "ASN" + site number
#remove ASN in front of site number
for(i in 1:nrow(data)){
if(substr(data$Sample.Name[i], 1,3)=="ASN"){
data$Sample.Name[i]<-substr(data$Sample.Name[i], 4, nchar(data$Sample.Name[i]))
}
}
#colnames(data)
#remove/rename variables
colnames(data)[5]<-"DOC"
data$HIX<-NULL
data$FieldNotes<-NULL
data$X<-NULL
data$X.1<-NULL
data$Time<-NULL
data$E280_oldmeth<-NULL
data$Salinity<-NULL
data$NH4<-NULL
data$NO3<-NULL
data$DIC<-NULL
data[which(data$SR > 6),18]<-NA #outlier in SR
data$Cth<-data$C1+data$C2+data$C3#make grouped PARAFAC terrestrial-humic
data$Cmh<-data$C5+data$C6
data$Cmp<-data$C7
data$Cf<-data$C4
mons<-c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12")
monCh<-c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
monChab<-c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov")
View(data)
vars<-list() #empty list to store data frames for each variable
for(i in 5:ncol(data)){
#stream Num, date1, date2, etc.
dfsub<-data [,c(1,2,4,i)] #get one variable at a time
dfsub$monYr<-NA
for(x in 1:nrow(dfsub)){ #loop to get dates in new format
dfsub$monYr[x]<-paste(mons[which((dfsub$Month[x]==monCh | dfsub$Month[x]==monChab))], dfsub[x,3], sep="-") #combine Date
}
dfsub<-dfsub[,-2:-3] #remove old date columns
dfsub[,1]<-as.numeric(dfsub[,1]) #get rid of leading 0's
dfsub<-dfsub[-which(is.na(dfsub$Sample.Name)),] #remove NA rows
dfsub[,2]<-as.numeric(dfsub[,2])
dfsub[is.na(dfsub)] <- -999 #replace NA with -999
#new data.frame for transformed data
df<-data.frame(matrix(ncol=(1+length(unique(dfsub$monYr))), nrow=length(unique(dfsub$Sample.Name, na.rm=T))))
colnames(df)<-c("Site", unique(dfsub$monYr)) #column names
df[,1]<-unique(dfsub$Sample.Name, na.rm=T) #site numbers
#manually convert long to wide
for(x in 1:nrow(df)){
for(z in 2:ncol(df)){
if(length(dfsub[which((dfsub[,1]==df[x,1]) & (dfsub[,3]==colnames(df)[z])),2])>0){
df[x,z]<-dfsub[which((dfsub[,1]==df[x,1]) & (dfsub[,3]==colnames(df)[z])),2]
} else{
df[x,z]<-as.numeric(-999)
} #end if else
} #end z loop
} #end x loop
###z-score
dfSite<-data.frame(Site=df$Site) #save site IDs
dates<-colnames(df) #save column names
df[df==-999.00] <- NA  #return to NA
df<-as.matrix(df[,-1]) #get data without sites
class(df)<-"numeric" ##back to numeric
df<-ScoreVals(df) #z-score
df<-cbind(dfSite,df) #combine z-scored data with site ID
colnames(df)<-dates
df[is.na(df)] <- -999 #return NA to -999 value
vars[[i-4]]<-df
names(vars)[i-4]<-colnames(dfsub)[2]
}
View(data)
########SUBSET THE DATA BY LAND USE GROUP##########
AllFiles<-list() #empty list to store all files subsetted by land use
AllFilesSub<-list() #empty list
# a loop that formats input data for the synchrony analysis
for(i in 1:length(vars)){
DF1<-vars[[i]]
if(names(vars)[i]=="SUVA254"){  #division error in May 2006 for SUVA254 and E280
DF1$`05-2006`<-NULL
} else if(names(vars)[i]=="E280"){
DF1$`05-2006`<-NULL
}
DF1$`10-2004`<-NULL
DF1$`04-2005`<-NULL
DF1$`06-2005`<-NULL
DF1$`07-2005`<-NULL
DF1$`08-2005`<-NULL
DF1$`09-2005`<-NULL
DF1$`11-2005`<-NULL
#DF1$September_2007<-NULL #check.. many vars not sampled
#DF1$November_2007<-NULL #check...redone
#DF1$September_2009<-NULL #check
#DF1$August_2012<-NULL #only TDN was measured
DF1$`08-2015`<-NULL
DF1$`06-2017`<-NULL #many streams not sampled
DF1$`08-2017`<-NULL #many vars and streams not sampled
DF1$`09-2017`<-NULL #many streams not sampled
DF1$`05-2019`<-NULL #many streams not sampled
DF<- as.data.frame(t(DF1)) #transpose to make river names the column names (i.e. long to wide format)
colnames(DF) <- as.character(unlist(DF[1,])) #use stream column to rename columns
#DF <- DF[-1, ] #delete the site number column
DF$Date<-row.names(DF) #make a new column for the sampling date
row.names(DF)<-seq(1, nrow(DF), by=1) #rename rows
DF[DF==-999.00] <- NA #replace blank cells with NA
DF[1:(ncol(DF)-1)] <- lapply(DF[1:(ncol(DF)-1)], as.character) #make data character
DF[1:(ncol(DF)-1)] <- lapply(DF[1:(ncol(DF)-1)], as.numeric) #this will have a warning message, it's okay. It is telling you that the blanks were replaced with "NA"
DF[1:(ncol(DF)-1)]<-lapply(DF[1:(ncol(DF)-1)], round, digits=3) #round to the number of digits in the original data
#DF<- DF[,colSums(is.na(DF))<nrow(DF)] #remove streams with no data
#DF<-DF[rowSums(is.na(DF)) != (ncol(DF)-1),] #remove dates with no data
#loop function over all variables and subset for all land cover groups
for(y in 1:length(siteList)){
DFsub<-pullSites(df=DF, sites=siteList[[y]]) #get sites for each LU group
DFsub$Date<-DF$Date
AllFilesSub[[y]]<-DFsub
names(AllFilesSub)[y]<-paste(names(vars[i]), names(siteList[y]), sep="") #change name of data in list to the same name as above
AllFiles[[i]]<-AllFilesSub #append full list with new data
names(AllFiles)[i]<-paste(names(vars[i])) #rename in appended list
}
}
AllFiles$DOC
siteLookup<-read.csv("rawData/SiteNameNum.csv", stringsAsFactors = F)
data<-read.csv("rawData/ASN_allData.csv", stringsAsFactors = F)#all data
landUse<-read.csv("Out/landUseGroups.csv", stringsAsFactors = F)#all data
mixed<-as.character(landUse[which(landUse$landUse=="mixed"), 11])
wetDominated<-as.character(landUse[which(landUse$landUse=="wetDominated"), 11])
agDominated<-as.character(landUse[which(landUse$landUse=="agDominated"), 11])
allsites<-as.character(landUse$SiteNum)
siteLookup<-read.csv("rawData/SiteNameNum.csv", stringsAsFactors = F)
data<-read.csv("rawData/ASN_allData.csv", stringsAsFactors = F)#all data
landUse<-read.csv("Out/landUseGroups.csv", stringsAsFactors = F)#all data
mixed<-as.character(landUse[which(landUse$landUse=="mixed"), 11])
wetDominated<-as.character(landUse[which(landUse$landUse=="wetDominated"), 11])
agDominated<-as.character(landUse[which(landUse$landUse=="agDominated"), 11])
allsites<-as.character(landUse$SiteNum)
#data to be included in PCA
pcaVars<-c("C1", "C2", "C3", "C4", "C5", "C6", "C7", "A350",
"SR", "HIX.OHNO", "FI", "SUVA254", "E280", "BA")
#make a list of site lists
siteList<-list(allsites=allsites, wetDominated=wetDominated,
mixed=mixed, agDominated=agDominated)
#some sites have just site number and some have "ASN" + site number
#remove ASN in front of site number
for(i in 1:nrow(data)){
if(substr(data$Sample.Name[i], 1,3)=="ASN"){
data$Sample.Name[i]<-substr(data$Sample.Name[i], 4, nchar(data$Sample.Name[i]))
}
}
#colnames(data)
#remove/rename variables
colnames(data)[5]<-"DOC"
data$HIX<-NULL
data$FieldNotes<-NULL
data$X<-NULL
data$X.1<-NULL
data$Time<-NULL
data$E280_oldmeth<-NULL
data$Salinity<-NULL
data$NH4<-NULL
data$NO3<-NULL
data$DIC<-NULL
data[which(data$SR > 6),18]<-NA #outlier in SR
data$Cth<-data$C1+data$C2+data$C3#make grouped PARAFAC terrestrial-humic
data$Cmh<-data$C5+data$C6
data$Cmp<-data$C7
data$Cf<-data$C4
siteLookup<-read.csv("rawData/SiteNameNum.csv", stringsAsFactors = F)
View(siteLookup)
data<-read.csv("rawData/ASN_allData.csv", stringsAsFactors = F)#all data
landUse<-read.csv("Out/landUseGroups.csv", stringsAsFactors = F)#all data
View(landUse)
View(data)
data$landUse<-0
for(i in 1:nrow(data)){
data$Sample.Name[i])<-landUse$landUse[which(landUse$SiteNum==data$Sample.Name[i])]
}
for(i in 1:nrow(data)){
data$Sample.Name[i]<-landUse$landUse[which(landUse$SiteNum==data$Sample.Name[i])]
}
i=1
data$Sample.Name[i]
data$Sample.Name[i]
siteLookup<-read.csv("rawData/SiteNameNum.csv", stringsAsFactors = F)
data<-read.csv("rawData/ASN_allData.csv", stringsAsFactors = F)#all data
landUse<-read.csv("Out/landUseGroups.csv", stringsAsFactors = F)#all data
mixed<-as.character(landUse[which(landUse$landUse=="mixed"), 11])
wetDominated<-as.character(landUse[which(landUse$landUse=="wetDominated"), 11])
agDominated<-as.character(landUse[which(landUse$landUse=="agDominated"), 11])
allsites<-as.character(landUse$SiteNum)
#data to be included in PCA
pcaVars<-c("C1", "C2", "C3", "C4", "C5", "C6", "C7", "A350",
"SR", "HIX.OHNO", "FI", "SUVA254", "E280", "BA")
#make a list of site lists
siteList<-list(allsites=allsites, wetDominated=wetDominated,
mixed=mixed, agDominated=agDominated)
#some sites have just site number and some have "ASN" + site number
#remove ASN in front of site number
for(i in 1:nrow(data)){
if(substr(data$Sample.Name[i], 1,3)=="ASN"){
data$Sample.Name[i]<-substr(data$Sample.Name[i], 4, nchar(data$Sample.Name[i]))
}
}
#colnames(data)
#remove/rename variables
colnames(data)[5]<-"DOC"
data$HIX<-NULL
data$FieldNotes<-NULL
data$X<-NULL
data$X.1<-NULL
data$Time<-NULL
data$E280_oldmeth<-NULL
data$Salinity<-NULL
data$NH4<-NULL
data$NO3<-NULL
data$DIC<-NULL
data[which(data$SR > 6),18]<-NA #outlier in SR
data$Cth<-data$C1+data$C2+data$C3#make grouped PARAFAC terrestrial-humic
data$Cmh<-data$C5+data$C6
data$Cmp<-data$C7
data$Cf<-data$C4
data$landUse<-0
View(data)
for(i in 1:nrow(data)){
data$landUse[i]<-landUse$landUse[which(landUse$SiteNum==data$Sample.Name[i])]
}
landUse$SiteNum==data$Sample.Name[i]
length(landUse$landUse[which(landUse$SiteNum==data$Sample.Name[i])])
siteLookup<-read.csv("rawData/SiteNameNum.csv", stringsAsFactors = F)
data<-read.csv("rawData/ASN_allData.csv", stringsAsFactors = F)#all data
landUse<-read.csv("Out/landUseGroups.csv", stringsAsFactors = F)#all data
mixed<-as.character(landUse[which(landUse$landUse=="mixed"), 11])
wetDominated<-as.character(landUse[which(landUse$landUse=="wetDominated"), 11])
agDominated<-as.character(landUse[which(landUse$landUse=="agDominated"), 11])
allsites<-as.character(landUse$SiteNum)
#data to be included in PCA
pcaVars<-c("C1", "C2", "C3", "C4", "C5", "C6", "C7", "A350",
"SR", "HIX.OHNO", "FI", "SUVA254", "E280", "BA")
#make a list of site lists
siteList<-list(allsites=allsites, wetDominated=wetDominated,
mixed=mixed, agDominated=agDominated)
#some sites have just site number and some have "ASN" + site number
#remove ASN in front of site number
for(i in 1:nrow(data)){
if(substr(data$Sample.Name[i], 1,3)=="ASN"){
data$Sample.Name[i]<-substr(data$Sample.Name[i], 4, nchar(data$Sample.Name[i]))
}
}
#colnames(data)
#remove/rename variables
colnames(data)[5]<-"DOC"
data$HIX<-NULL
data$FieldNotes<-NULL
data$X<-NULL
data$X.1<-NULL
data$Time<-NULL
data$E280_oldmeth<-NULL
data$Salinity<-NULL
data$NH4<-NULL
data$NO3<-NULL
data$DIC<-NULL
data[which(data$SR > 6),18]<-NA #outlier in SR
data$Cth<-data$C1+data$C2+data$C3#make grouped PARAFAC terrestrial-humic
data$Cmh<-data$C5+data$C6
data$Cmp<-data$C7
data$Cf<-data$C4
data$landUse<-0
for(i in 1:nrow(data)){
if(length(landUse$landUse[which(landUse$SiteNum==data$Sample.Name[i])]) > 0){
data$landUse[i]<-landUse$landUse[which(landUse$SiteNum==data$Sample.Name[i])]
}
}
AllSites<-data[which(data$landUse != 0), ]
library(ggplot2)
ggplot(data=AllSites, aes(x=landUse, y=Cth))+ geom_boxplot()
length(which(data$Cth == 0))
length(which(AllSites$Cth == 0))
View(AllSites)
hist(AllSites$Cth)
range(AllSites$Cth)
range(AllSites$Cth, na.rm=TRUE)
data$Cth[which(data$Cth < 5)]<-NA #outliers in Cth
for(i in 1:nrow(data)){
if(length(landUse$landUse[which(landUse$SiteNum==data$Sample.Name[i])]) > 0){
data$landUse[i]<-landUse$landUse[which(landUse$SiteNum==data$Sample.Name[i])]
}
}
AllSites<-data[which(data$landUse != 0), ]
ggplot(data=AllSites, aes(x=landUse, y=Cth))+ geom_boxplot()
ggplot(data=AllSites, aes(x=landUse, y=Cmp))+ geom_boxplot()
ggplot(data=AllSites, aes(x=landUse, y=Cf))+ geom_boxplot()
data$Cf[which(data$Cf < 5)]<-NA #outliers in Cth
ggplot(data=AllSites, aes(x=landUse, y=C1))+ geom_boxplot()
data$C1[which(data$C1< 5)]<-NA #outliers in Cth
ggplot(data=AllSites, aes(x=landUse, y=C2))+ geom_boxplot()
data$C2[which(data$C2 < 5)]<-NA #outliers in Cth
ggplot(data=AllSites, aes(x=landUse, y=C3))+ geom_boxplot()
ggplot(data=AllSites, aes(x=landUse, y=C4))+ geom_boxplot()
ggplot(data=AllSites, aes(x=landUse, y=C5))+ geom_boxplot()
ggplot(data=AllSites, aes(x=landUse, y=C6))+ geom_boxplot()
hist(AllSites$C6)
hist(AllSites$C7)
data$Cth[which(data$Cth < 5)]<-NA #outliers in Cth
data$Cf[which(data$Cf < 5)]<-NA #outliers in Cth
data$C1[which(data$C1< 5)]<-NA #outliers in Cth
data$C2[which(data$C2 < 5)]<-NA #outliers in Cth
data$C3[which(data$C3 < 2)]<-NA #outliers in Cth
data$C4[which(data$C4 < 1)]<-NA #outliers in Cth
data$C5[which(data$C5 < 1)]<-NA #outliers in Cth
data$landUse<-0
for(i in 1:nrow(data)){
if(length(landUse$landUse[which(landUse$SiteNum==data$Sample.Name[i])]) > 0){
data$landUse[i]<-landUse$landUse[which(landUse$SiteNum==data$Sample.Name[i])]
}
}
AllSites<-data[which(data$landUse != 0), ]
length(which(AllSites$Cth == 0))
ggplot(data=AllSites, aes(x=landUse, y=C6))+ geom_boxplot()
ggplot(data=AllSites, aes(x=landUse, y=C5))+ geom_boxplot()
ggplot(data=AllSites, aes(x=landUse, y=C4))+ geom_boxplot()
ggplot(data=AllSites, aes(x=landUse, y=E280))+ geom_boxplot()
ggplot(data=AllSites, aes(x=landUse, y=DOC))+ geom_boxplot()
ggplot(data=AllSites, aes(x=landUse, y=DOC))+ geom_boxplot()
ggplot(data=AllSites, aes(x=year, y=DOC, color=landUse, group=Sample.Name))+geom_line()
ggplot(data=AllSites, aes(x=Year, y=DOC, color=landUse, group=Sample.Name))+geom_line()
hist(AllSites$DOC)
hist(as.numeric(AllSites$DOC))
AllSites$DOC<-as.numeric(AllSites$DOC)
ggplot(data=AllSites, aes(x=Year, y=DOC, color=landUse, group=Sample.Name))+geom_line()
